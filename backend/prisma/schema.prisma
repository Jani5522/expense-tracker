// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  name      String
  createdAt DateTime     @default(now())
  incomes   IncomeEntry[]
  expenses  ExpenseEntry[]
  recurring_expenses RecurringExpense[]
  categories Category[]  // Relation to categories
  budgets    Budget[]    // Relation to budgets
}

model IncomeEntry {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  source      String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
}

model Category {
  id           Int           @id @default(autoincrement())
  type         String
  name         String
  createdAt    DateTime       @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model ExpenseEntry {
  id             Int      @id @default(autoincrement())
  amount         Float
  date           DateTime
  category       String
  description    String?
  receipt        String?
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model RecurringExpense {
  id             Int      @id @default(autoincrement())
  amount         Float
  category       String
  description    String?
  recurrenceType String   // Can be 'daily', 'weekly', 'monthly', etc.
  nextDueDate    DateTime // The next due date for this recurring transaction
  isActive       Boolean  @default(true) // Indicates if the recurring expense is active
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Budget {
  id          Int      @id @default(autoincrement())
  category    String
  budget      Float
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
